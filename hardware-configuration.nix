# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  pkgs,
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  # load amdgpu kernelModule in stage 1. Can fix lower resolution in boot screen during initramfs phase .
  hardware.amdgpu.initrd.enable = true;

  # modesetting - video driver for framebuffer device
  services.xserver.videoDrivers = lib.mkDefault ["modesetting"];

  # Enable hardware accelerated graphics drivers
  hardware.graphics = {
    enable = true;
    enable32Bit = true;
    extraPackages = with pkgs; [
      # amdvlk # AMD Open Source Driver for Vulkan®
      # libvdpau-va-gl # VDPAU driver with OpenGL/VAAPI backend. H.264 only.
    ];
    extraPackages32 = with pkgs; [
      # driversi686Linux.amdvlk
      # driversi686Linux.libvdpau-va-gl # VDPAU driver with OpenGL/VAAPI backend. H.264 only.
    ];
  };

  # OpenCL parallel computing API
  hardware.amdgpu.opencl.enable = true;
  environment.systemPackages = with pkgs; [
    clinfo
  ];

  environment.sessionVariables = {
    # QT_WAYLAND_DECORATION = "gnome";
    # QT_QPA_PLATFORM = "wayland";
    # VAAPI and VDPAU config for accelerated video.
    # See https://wiki.archlinux.org/index.php/Hardware_video_acceleration
    VDPAU_DRIVER = "radeonsi";
    # LIBVA_DRIVER_NAME = "radeonsi";
  };

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];
  # boot.kernelPackages = pkgs.linuxPackages_6_9;
  # boot.kernelPackages = pkgs.linuxPackages_xanmod_latest;
  boot.kernelPackages = pkgs.linuxPackages_latest;
  boot.kernelModules = ["kvm-amd"];
  # boot.kernelParams = [ "amd_pstate=guided" ];
  boot.kernelParams = ["amd_pstate=active"];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/d8ed70d3-b853-41ff-98ca-de42ddae104b";
    fsType = "ext4";
  };

  boot.initrd.luks.devices."luks-ef64ea49-a36c-4421-b169-92643f04df9f".device = "/dev/disk/by-uuid/ef64ea49-a36c-4421-b169-92643f04df9f";

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/DF26-4A0E";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  swapDevices = [];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0f0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
